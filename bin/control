#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

vertx_BIN_DIR=${OPENSHIFT_VERTX_DIR}/bin
vertx_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/vertx.pid

cartridge_type="vertx"

VERTX_BIN_DIR=${OPENSHIFT_VERTX_DIR}/bin
VERTX_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/vertx.pid

# Check if the jbossas process is running
function isrunning() {
    
    # Check for running app
    if [ -f "$VERTX_PID_FILE" ]; then
      jbpid=$(cat $VERTX_PID_FILE);
      if /bin/ps --pid $jbpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi
   
    return 1
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z $should_be_gone_pid ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z $should_be_gone_pid ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

function stop() {
  echo "Stopping $cartridge_type cart"
  
  if isrunning; then
		if [ -f "$VERTX_PID_FILE" ]; then
      pid=$(cat $VERTX_PID_FILE);
      echo "Sending SIGTERM to jboss:$pid ..." 1>&2
      killtree $pid
    else 
	    echo "Failed to locate JBOSS PID File" 1>&2
	  fi
  fi
}

function start() {

	pushd ${OPENSHIFT_VERTX_DIR}
		./bin/run-vertx.sh > ${OPENSHIFT_TMP_DIR}/${cartridge_type}.log 2>&1 &
		PROCESS_ID=$!
    	echo "$PROCESS_ID" > ${VERTX_PID_FILE}
	popd

}

function restart() {
    echo "Restarting $cartridge_type cart"
   
  	stop
  	
  	start
}

case "$1" in
  start)        start ;;
  stop)			stop ;;
  restart) 		restart ;;
  *)            exit 0
esac



